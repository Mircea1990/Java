<?xml version="1.0" encoding="UTF-8"?>

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>jakartaee</groupId>
    <artifactId>project</artifactId>
    <version>10-SNAPSHOT</version>
    <packaging>pom</packaging>
    
    <name>Jakarta EE 10 Examples</name>
    
    <modules>
        <module>servlet</module>
    </modules>
    
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <junit.version>4.13.2</junit.version>
        <junit.version>4.13.2</junit.version>
        <htmlunit.version>2.70.0</htmlunit.version>
        <arquillian-container-test-api.version>1.7.0.Final</arquillian-container-test-api.version>
        <arquillian-bom.version>1.7.0.Final</arquillian-bom.version>
        <jakarta.jakartaee-web-api.version>10.0.0</jakarta.jakartaee-web-api.version>
        <jakarta.jakartaee-api.version>10.0.0</jakarta.jakartaee-api.version>
        <httpclient.version>4.5.14</httpclient.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- This is the main API for the Jakarta EE (formerly Java EE) platform.
            It provides a set of standard APIs for building enterprise applications.
            -->
            <dependency>
                <groupId>jakarta.platform</groupId>
                <artifactId>jakarta.jakartaee-api</artifactId>
                <version>${jakarta.jakartaee-api.version}</version>
            </dependency>
    
            <!--This dependency specifically includes APIs for web-based applications in the Jakarta EE platform.-->
            <dependency>
                <groupId>jakarta.platform</groupId>
                <artifactId>jakarta.jakartaee-web-api</artifactId>
                <version>${jakarta.jakartaee-web-api.version}</version>
            </dependency>
    
            <!--Arquillian is a framework for testing Java applications. This dependency
            includes a Bill of Materials (BOM) that helps manage the versions of various
            Arquillian modules used in the project.-->
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>${arquillian-bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
    
            <!--This dependency provides APIs for testing containers
            (such as application servers) using the Arquillian framework.-->
            <dependency>
                <groupId>org.jboss.arquillian.container</groupId>
                <artifactId>arquillian-container-test-api</artifactId>
                <version>${arquillian-container-test-api.version}</version>
            </dependency>
    
            <!--
                HtmlUnit - A library to do HTTP requests from the client (the test) and if the response is
                HTML inspect that HTML using a DOM API.
            -->
            <dependency>
                <groupId>net.sourceforge.htmlunit</groupId>
                <artifactId>htmlunit</artifactId>
                <version>${htmlunit.version}</version>
                <scope>test</scope>
            </dependency>
    
            <!--
                 HttpClient - a library to do HTTP requests from (in this project) the server.
                 The jar file for this is included in the war that is deployed to the server for applications
                 that use this.
            -->
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>${httpclient.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!--
            Arquillian - An extension to JUnit that starts a server before running's (if needed)
            and deploys the example applications to it.
         -->
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>
    
        <!--This dependency provides the Arquillian Servlet protocol implementation.
        It allows you to test servlet-based applications using Arquillian.
        By using this artifact, you can write tests that interact with servlet
        containers and verify the behavior of your servlets.-->
        <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet-jakarta</artifactId>
            <scope>test</scope>
        </dependency>
    
        <!--ShrinkWrap is a Java library designed to create and manipulate
        archives programmatically. This dependency provides the Maven implementation
        of ShrinkWrap Resolver, which allows you to resolve dependencies at runtime.
        With ShrinkWrap, you can create custom archives for testing purposes and dynamically
        include dependencies in your tests.
-->
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-impl-maven</artifactId>
            <scope>test</scope>
        </dependency>
    
        <!--This dependency is another implementation of ShrinkWrap Resolver specifically
        for Maven archives. It helps you resolve and include Maven artifacts in your tests,
        making it easier to work with external dependencies.-->
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-impl-maven-archive</artifactId>
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>org.jboss.arquillian.container</groupId>
            <artifactId>arquillian-container-test-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-core</artifactId>
        </dependency>
        <dependency>
        <groupId>org.jboss.arquillian.test</groupId>
        <artifactId>arquillian-test-api</artifactId>
    </dependency>
        <dependency><groupId>net.sourceforge.htmlunit</groupId><artifactId>htmlunit</artifactId><scope>compile</scope></dependency><dependency><groupId>junit</groupId><artifactId>junit</artifactId><version>4.13.2</version><scope>compile</scope></dependency>
    </dependencies>

    <build>
        <finalName>Jakarta EE 10 Examples</finalName>

        <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (maybe moved to parent pom) -->
            <plugins>
                
                <!--is responsible for compiling the Java source code in the project.
                By specifying the version, you can ensure that the code is compiled using the desired compiler version.-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.11.0</version>
                </plugin>
        
                <!--These plugins are used for running tests in the project.
                The maven-surefire-plugin is responsible for running unit tests, while
                the maven-failsafe-plugin is used for running integration tests. By configuring these plugins,
                you can automate the testing process and verify the correctness of your code.-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
        
                <!--These plugins are used for packaging Java EE applications.
                The maven-ear-plugin helps create Enterprise Archive (EAR) files,
                which contain multiple modules (e.g., EJBs, WARs) for deployment.
                The maven-ejb-plugin is used specifically for packaging Enterprise JavaBeans (EJBs).-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-ear-plugin</artifactId>
                    <version>3.3.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-ejb-plugin</artifactId>
                    <version>3.2.1</version>
                </plugin>
        
                <!-- These plugins perform various tasks during the build process.
                The maven-clean-plugin helps clean the project by deleting generated files.
                The maven-resources-plugin manages project resources (e.g., copying files)
                during the build. -->
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
        
                <!--The maven-war-plugin is used for packaging web applications as Web Application Archive (WAR) files.
                It allows you to configure aspects of the generated WAR file, such as including or excluding
                certain files and directories.-->
                <plugin>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>3.2.2</version>
                </plugin>
        
                <!--The maven-install-plugin is responsible for installing the
                project artifact into the local Maven repository for reuse in other projects.-->
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>
        
                <!--The maven-deploy-plugin is used for deploying the project artifact to a remote repository,
                typically for sharing with other developers or for deployment to production environments.-->
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            
            <!--The purpose of the maven-war-plugin is to package your web application's compiled classes,
            resources, libraries, and other necessary files into a WAR file that can be deployed to a web server.
            It provides a convenient way to structure and package your web application, ensuring that all
            the required files and dependencies are correctly included.-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.3.2</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
    
            <!--This plugin is specifically designed for running integration tests as part of the Maven build process.-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <systemPropertyVariables>
                        <finalName>${project.build.finalName}</finalName>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
